user nginx;
pid /tmp/nginx.pid;
worker_processes 2;
events {
    worker_connections 1024;
}
http {
    client_body_temp_path /tmp/client_temp;
    proxy_temp_path /tmp/proxy_temp_path;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;

    include /etc/nginx/mime.types;
    client_max_body_size 1M;

    log_format json escape=json '{'
        '"timestamp": "$time_iso8601", '
        '"host": "$host", '
        '"status": "$status", '
        '"remote_addr": "$remote_addr", '
        '"remote_user": "$remote_user", '
        '"request_method": "$request_method", '
        '"request_uri": "$request_uri", '
        '"server_protocol": "$server_protocol", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"request_time": "$request_time", '
        '"upstream_response_time": "$upstream_response_time", '
        '"http_referer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_x_forwarded_for": "$http_x_forwarded_for", '
        '"http_x_forwarded_proto": "$http_x_forwarded_proto"'
    '}';
    access_log /var/log/nginx/access.log json;

    map $http_user_agent $healthcheck {
        default 0;
        ~ELB-HealthChecker 1;
    }

    server {
        listen 80 default_server;
        server_name _;
        access_log off;

        # 指定ドメイン以外のアクセスは捨てる
        if ($healthcheck = 0) {
            return 444;
        }

        # ロードバランサーからのアクセスだけ通す
        if ($healthcheck = 1) {
            return 200;
        }
    }

    #include /tmp/default.conf;
}
